ví dụ của việc sử dụng Middleware xác thực người dùng  và Middleware xử lý lỗi trong việc nếu :
một trang web bình thường sẽ có phần thông tin liên hệ , giới thiệu sản phẩm là cho phép truy cập không cần kiểm tra người dùng
 , và cũng có phần truy cập để xem thông tin cá nhân quan trọng người dùng , thì việc bố trí những middleware như thế nào?


Để bố trí middleware cho trang web có cả phần công khai và phần riêng tư, bạn cần áp dụng middleware một cách có chọn lọc thay vì áp dụng cho toàn bộ ứng dụng.

Nguyên tắc vàng là: **Middleware chung được áp dụng toàn cục ở trên cùng, middleware bảo vệ chỉ được áp dụng cho các route cần nó, và middleware xử lý lỗi luôn nằm ở cuối cùng.**

-----

## \#\# Bố Trí Middleware

Đây là thứ tự sắp xếp chuẩn trong file `app.js` hoặc `index.js` của bạn:

1.  **Middleware Toàn Cục (Global Middleware):** Các middleware cần chạy cho **mọi** request, không phân biệt route. Ví dụ: `express.json()` để đọc body, `cors` để xử lý Cross-Origin, hoặc một middleware ghi log (logger). Chúng được đặt ngay sau khi khởi tạo `app`.

2.  **Các Route Công Khai (Public Routes):** Đây là các route cho trang giới thiệu, liên hệ, danh sách sản phẩm. Chúng được định nghĩa ngay sau middleware toàn cục và **không** cần middleware xác thực.

3.  **Các Route Riêng Tư (Private/Protected Routes):** Đây là các route xem thông tin cá nhân, lịch sử mua hàng. **Middleware xác thực người dùng** sẽ được chèn vào **chính giữa** định nghĩa của route này, ngay trước hàm xử lý cuối cùng.

4.  **Middleware Xử Lý Lỗi (Error Handling Middleware):** Luôn luôn được đặt ở **cuối cùng** trong file, sau tất cả các route khác. Nó sẽ bắt tất cả các lỗi được truyền đến từ `next(error)`.

-----

## \#\# Ví Dụ Cụ Thể

Dưới đây là một file `app.js` hoàn chỉnh minh họa cho kịch bản của bạn:

```javascript
const express = require('express');
const app = express();
const PORT = 3000;

// --- 1. MIDDLEWARE TOÀN CỤC ---
// Middleware này chạy cho MỌI request đến server
app.use(express.json()); // Để đọc được req.body dạng JSON

// --- Mock Middleware (Giả lập để chạy ví dụ) ---

// Middleware xác thực người dùng
const verifyUser = (req, res, next) => {
    const { authorization } = req.headers; // Lấy token từ header

    // Giả lập: nếu token là 'valid_token' thì hợp lệ
    if (authorization === 'Bearer valid_token') {
        // Gắn thông tin người dùng vào request để các hàm sau có thể dùng
        req.user = { id: 123, name: 'Người dùng A' };
        next(); // Token hợp lệ, cho phép đi tiếp
    } else {
        // Token không hợp lệ, tạo lỗi và chuyển cho middleware xử lý lỗi
        const error = new Error('Không được phép truy cập');
        error.status = 401; // 401 Unauthorized
        next(error);
    }
};

// --- 2. CÁC ROUTE CÔNG KHAI ---
// Bất kỳ ai cũng có thể truy cập mà không cần xác thực

app.get('/', (req, res) => {
    res.send('Đây là trang chủ');
});

app.get('/products', (req, res) => {
    res.json({ message: 'Đây là trang giới thiệu sản phẩm' });
});

app.get('/contact', (req, res) => {
    res.json({ message: 'Đây là trang thông tin liên hệ' });
});


// --- 3. CÁC ROUTE RIÊNG TƯ / ĐƯỢC BẢO VỆ ---
// Middleware `verifyUser` được đặt ngay trước hàm xử lý chính của route này
// Chỉ request nào vượt qua `verifyUser` mới vào được bên trong.
app.get('/profile', verifyUser, (req, res) => {
    // Nhờ có middleware verifyUser, giờ đây chúng ta có req.user
    res.json({
        message: 'Đây là trang thông tin cá nhân CỰC KỲ QUAN TRỌNG',
        userData: req.user
    });
});


// --- 4. MIDDLEWARE XỬ LÝ LỖI ---
// Phải được đặt ở cuối cùng và có 4 tham số (err, req, res, next)
app.use((err, req, res, next) => {
    console.error(err.stack); // Ghi log lỗi ra console
    const statusCode = err.status || 500;
    res.status(statusCode).json({
        success: false,
        message: err.message || 'Có lỗi xảy ra từ phía server'
    });
});


app.listen(PORT, () => {
    console.log(`Server đang chạy trên port ${PORT}`);
});
```

-----

## \#\# Luồng Hoạt Động

  * **Khi bạn truy cập `GET /products` (công khai):**

    1.  Request đi qua `express.json()`.
    2.  Nó khớp với route `/products`.
    3.  Hàm xử lý của route `/products` được thực thi và gửi về JSON.
    4.  Chu trình kết thúc.

  * **Khi bạn truy cập `GET /profile` (riêng tư):**

    1.  Request đi qua `express.json()`.
    2.  Nó khớp với route `/profile`.
    3.  Express thấy có middleware `verifyUser` và thực thi nó trước.
    4.  **Nếu token không hợp lệ:** `verifyUser` gọi `next(error)`. Express sẽ bỏ qua hàm xử lý chính của `/profile` và nhảy thẳng xuống middleware xử lý lỗi cuối cùng để trả về lỗi 401.
    5.  **Nếu token hợp lệ:** `verifyUser` gọi `next()`. Express tiếp tục thực thi hàm xử lý chính của `/profile` và gửi về thông tin cá nhân.